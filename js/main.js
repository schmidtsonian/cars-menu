/// <reference path="definitions/jquery/jquery.d.ts"/>
var app;
(function (app) {
    var menu;
    (function (menu) {
        var Loader = (function () {
            function Loader() {
                this.images = [];
            }
            Loader.prototype.init = function () {
                this
                    .cacheElements()
                    .bindings();
                return this;
            };
            Loader.prototype.cacheElements = function () {
                var _this = this;
                this.imagesLoaded = 1;
                $('body')
                    .find('[data-loadimage]')
                    .each(function (index, value) {
                    _this.images
                        .push($(value)
                        .data('loadimage'));
                });
                return this;
            };
            Loader.prototype.bindings = function () {
                var _this = this;
                this.images.forEach(function (src) {
                    var img = new Image();
                    img.src = src;
                    img.onload = function () { _this.onLoadImage(); };
                    img.onerror = function () { _this.onLoadImage(); };
                });
                return this;
            };
            Loader.prototype.onLoadImage = function () {
                this.imagesLoaded++;
                if (this.imagesLoaded >= this.images.length) {
                    if (typeof this.onLoadAllCallback == "function") {
                        this.onLoadAllCallback();
                    }
                }
            };
            return Loader;
        }());
        menu.Loader = Loader;
    })(menu = app.menu || (app.menu = {}));
})(app || (app = {}));
/// <reference path="definitions/jquery/jquery.d.ts" />
/// <reference path="Loader.ts"/>
//TODO: Refactor this shiet!!!
$.fn.isOnScreen = function () {
    var win = $(window);
    var viewport = {
        top: win.scrollTop() + 300,
        left: win.scrollLeft()
    };
    viewport.right = viewport.left + win.width();
    viewport.bottom = viewport.top + (win.height() - 300);
    var bounds = this.offset();
    bounds.right = bounds.left + this.outerWidth();
    bounds.bottom = bounds.top + this.outerHeight();
    return (!(viewport.right < bounds.left ||
        viewport.left > bounds.right ||
        viewport.bottom < bounds.top ||
        viewport.top > bounds.bottom));
};
//TODO: apply debounce on resize
$(window).on('load scroll resize', function () {
    $('.js-block').each(function (i) {
        var $el = $('.js-block').eq(i);
        if ($el.isOnScreen()) {
            $el.addClass('visible');
        }
        else {
            $el.removeClass('visible');
        }
    });
});
$(window).on('beforeunload', function () {
    $(window).scrollTop(0);
});
var app;
(function (app) {
    var menu;
    (function (menu) {
        var Loader = app.menu.Loader;
        var Main = (function () {
            function Main() {
                this.loader = new Loader();
            }
            Main.prototype.init = function () {
                this.loader.onLoadAllCallback = function () {
                    $('#js-spinner').addClass('spinner--close');
                    setTimeout(function () {
                        $('#js-spinner').remove();
                        $('body').removeClass('js-loading');
                    }, 950);
                };
                this.loader.init();
            };
            return Main;
        }());
        menu.Main = Main;
        // Init all stuff.
        menu.mainView = new Main();
        menu.mainView.init();
    })(menu = app.menu || (app.menu = {}));
})(app || (app = {}));

//# sourceMappingURL=data:application/json;base64,
